import { Model, DataTypes, Optional } from "sequelize";
import { sequelize } from "../config/db";

/**
 * Defines the complete data structure for a leftover food item
 * Includes all possible fields with proper typing
 */
export interface LeftoverAttributes {
  id: string;
  name: string;
  description?: string;
  portion: number;
  storageLocation: "freezer" | "fridge";
  storedDate: Date;
  expiryDate: Date;
  ingredients?: string[];
  tags?: string[];
  consumed: boolean;
  consumedDate?: Date;
  createdAt?: Date;
  updatedAt?: Date;
}

/**
 * Defines which attributes are optional during creation
 * ID and timestamps are auto-generated by Sequelize
 */
interface LeftoverCreationAttributes
  extends Optional<LeftoverAttributes, "id" | "createdAt" | "updatedAt"> {}

/**
 * Sequelize model class for leftovers
 * Implements the full interface with proper TypeScript typing
 */
class Leftover
  extends Model<LeftoverAttributes, LeftoverCreationAttributes>
  implements LeftoverAttributes
{
  public id!: string;
  public name!: string;
  public description?: string;
  public portion!: number;
  public storageLocation!: "freezer" | "fridge";
  declare storedDate: Date;
  declare expiryDate: Date;
  public ingredients?: string[];
  public tags?: string[];
  public consumed!: boolean;
  declare consumedDate?: Date;

  // Timestamps
  public readonly createdAt!: Date;
  public readonly updatedAt!: Date;
}

// Model schema definition with field configurations
Leftover.init(
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    portion: {
      type: DataTypes.FLOAT,
      allowNull: false,
      defaultValue: 1,
    },
    storageLocation: {
      type: DataTypes.ENUM("freezer", "fridge"),
      allowNull: false,
    },
    storedDate: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW,
      get() {
        const date = this.getDataValue("storedDate");
        return date ? new Date(date) : null;
      },
    },
    expiryDate: {
      type: DataTypes.DATE,
      allowNull: false,
      get() {
        const date = this.getDataValue("expiryDate");
        return date ? new Date(date) : null;
      },
    },
    ingredients: {
      type: DataTypes.JSON,
      allowNull: true,
      // Custom getter to parse stored JSON string
      get() {
        const rawValue = this.getDataValue("ingredients");
        return rawValue ? JSON.parse(rawValue as unknown as string) : [];
      },
      // Custom setter to ensure proper JSON storage
      set(value: string[]) {
        this.setDataValue("ingredients", value);
      },
    },
    tags: {
      type: DataTypes.JSON,
      allowNull: true,
      // Custom getter to parse stored JSON string
      get() {
        const rawValue = this.getDataValue("tags");
        return rawValue ? JSON.parse(rawValue as unknown as string) : [];
      },
      // Custom setter to ensure proper JSON storage
      set(value: string[]) {
        this.setDataValue("tags", value);
      },
    },
    consumed: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
    consumedDate: {
      type: DataTypes.DATE,
      allowNull: true,
      get() {
        const date = this.getDataValue("consumedDate");
        return date ? new Date(date) : null;
      },
    },
  },
  {
    sequelize,
    modelName: "leftover",
    tableName: "leftovers",
    timestamps: true,
  }
);

export default Leftover;
